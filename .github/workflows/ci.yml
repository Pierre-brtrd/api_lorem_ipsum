name: 🦀 CI/CD Pipeline

on:
    push:
        branches: [master, developement]
    pull_request:
        branches: [master]

env:
    CARGO_TERM_COLOR: always

jobs:
    test:
        name: 🧪 Tests
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: 📦 Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-

            - name: 🔍 Check formatting
              run: cargo fmt --all -- --check

            - name: 📋 Run Clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

            - name: 🏗️ Build
              run: cargo build --verbose

            - name: 🧪 Run tests
              run: |
                  # Tests unitaires
                  cargo test --lib --verbose
                  # Tests d'intégration  
                  cargo test --test '*' --verbose
                  # Tests de documentation
                  cargo test --doc --verbose

    integration:
        name: 🔗 Integration Tests
        runs-on: ubuntu-latest
        if: github.event_name == 'push' || github.event_name == 'pull_request'

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: 📦 Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-integration-

            - name: 🏗️ Build for integration tests
              run: cargo build --release

            - name: 🔗 Run integration tests
              run: |
                  # Tests fonctionnels avec données réelles
                  cargo test --release --test integration -- --test-threads=1
                  # Tests de performance basiques
                  cargo test --release --test performance -- --ignored

    security:
        name: 🔒 Security Audit
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: 📦 Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-audit-

            - name: 🔒 Install cargo-audit
              run: cargo install --locked cargo-audit

            - name: 🔒 Security audit
              run: cargo audit

    coverage:
        name: 📊 Code Coverage
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: 📦 Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-coverage-

            - name: 📦 Install cargo-llvm-cov
              uses: taiki-e/install-action@cargo-llvm-cov

            - name: 📊 Generate coverage report
              run: |
                  # Tests unitaires ET fonctionnels avec coverage optimisée
                  cargo llvm-cov --all-features --workspace \
                    --ignore-filename-regex "(tests?/|benches?/)" \
                    --lcov --output-path lcov.info

            - name: 📤 Upload to Codecov
              uses: codecov/codecov-action@v5
              with:
                  files: lcov.info
                  fail_ci_if_error: false
                  verbose: true
              env:
                  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
