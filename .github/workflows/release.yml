name: üöÄ Auto Release

on:
    push:
        branches: [master]
        paths: ["CHANGELOG.md", "Cargo.toml"]

env:
    CARGO_TERM_COLOR: always

jobs:
    check-version:
        name: üîç Check Version Changes
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.version.outputs.version }}
            version-changed: ${{ steps.version.outputs.changed }}
            release-notes: ${{ steps.changelog.outputs.notes }}

        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 2

            - name: üîç Extract version from Cargo.toml
              id: version
              run: |
                  VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

                  # V√©rifier si la version a chang√©
                  git show HEAD~1:Cargo.toml > previous_cargo.toml || echo 'version = "0.0.0"' > previous_cargo.toml
                  PREVIOUS_VERSION=$(grep '^version = ' previous_cargo.toml | sed 's/version = "\(.*\)"/\1/' || echo "0.0.0")

                  if [ "$VERSION" != "$PREVIOUS_VERSION" ]; then
                    echo "changed=true" >> $GITHUB_OUTPUT
                    echo "Version changed from $PREVIOUS_VERSION to $VERSION"
                  else
                    echo "changed=false" >> $GITHUB_OUTPUT
                    echo "Version unchanged: $VERSION"
                  fi

            - name: üìã Extract changelog for version
              id: changelog
              if: steps.version.outputs.changed == 'true'
              run: |
                  VERSION="${{ steps.version.outputs.version }}"

                  # Script pour extraire les notes de la version du CHANGELOG
                  cat << 'EOF' > extract_changelog.py
                  import re
                  import sys

                  def extract_version_notes(changelog_path, version):
                      with open(changelog_path, 'r', encoding='utf-8') as f:
                          content = f.read()
                      
                      # Pattern pour trouver la section de version
                      version_pattern = rf'## \[{re.escape(version)}\].*?(?=## \[|\Z)'
                      match = re.search(version_pattern, content, re.DOTALL)
                      
                      if match:
                          section = match.group(0)
                          # Nettoyer et formater les notes
                          lines = section.split('\n')[1:]  # Enlever la ligne de titre
                          notes = []
                          for line in lines:
                              line = line.strip()
                              if line and not line.startswith('## ['):
                                  notes.append(line)
                          
                          return '\n'.join(notes).strip()
                      
                      return f"Release notes for version {version}"

                  if __name__ == "__main__":
                      notes = extract_version_notes('CHANGELOG.md', sys.argv[1])
                      print(notes)
                  EOF

                  NOTES=$(python3 extract_changelog.py "$VERSION")

                  # √âchapper les caract√®res sp√©ciaux pour GitHub Output
                  NOTES="${NOTES//'%'/'%25'}"
                  NOTES="${NOTES//$'\n'/'%0A'}"
                  NOTES="${NOTES//$'\r'/'%0D'}"

                  echo "notes=$NOTES" >> $GITHUB_OUTPUT

    release:
        name: üöÄ Create Release
        runs-on: ubuntu-latest
        needs: [check-version]
        if: needs.check-version.outputs.version-changed == 'true'

        steps:
            - name: üì• Checkout code
              uses: actions/checkout@v4

            - name: ü¶Ä Setup Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true

            - name: üì¶ Cache dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: üèóÔ∏è Build release
              run: cargo build --release

            - name: üß™ Run tests
              run: cargo test --release

            - name: üì¶ Create release archive
              run: |
                  mkdir -p release-artifacts

                  # Copier l'ex√©cutable
                  cp target/release/api_lorem_ipsum release-artifacts/

                  # Copier la documentation
                  cp README.md CHANGELOG.md LICENSE release-artifacts/

                  # Cr√©er une archive
                  tar -czf api_lorem_ipsum-${{ needs.check-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz -C release-artifacts .

                  # Cr√©er un checksum
                  sha256sum api_lorem_ipsum-${{ needs.check-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz > api_lorem_ipsum-${{ needs.check-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz.sha256

            - name: üìù Generate detailed release notes
              id: release-notes
              run: |
                  VERSION="${{ needs.check-version.outputs.version }}"
                  BASIC_NOTES="${{ needs.check-version.outputs.release-notes }}"

                  cat << EOF > detailed_notes.md
                  # üöÄ API Lorem Ipsum v${VERSION}

                  ${BASIC_NOTES}

                  ---

                  ## üì¶ Installation

                  ### Depuis les sources
                  \`\`\`bash
                  git clone https://github.com/Pierre-brtrd/api_lorem_ipsum.git
                  cd api_lorem_ipsum
                  git checkout v${VERSION}
                  cargo build --release
                  \`\`\`

                  ### Archive binaire
                  T√©l√©chargez l'archive ci-dessous et extrayez-la :
                  \`\`\`bash
                  tar -xzf api_lorem_ipsum-${VERSION}-x86_64-unknown-linux-gnu.tar.gz
                  ./api_lorem_ipsum
                  \`\`\`

                  ## üîç V√©rification

                  V√©rifiez l'int√©grit√© du fichier t√©l√©charg√© :
                  \`\`\`bash
                  sha256sum -c api_lorem_ipsum-${VERSION}-x86_64-unknown-linux-gnu.tar.gz.sha256
                  \`\`\`

                  ## üìö Documentation

                  - [README](https://github.com/Pierre-brtrd/api_lorem_ipsum/blob/v${VERSION}/README.md)
                  - [Guide de Contribution](https://github.com/Pierre-brtrd/api_lorem_ipsum/blob/v${VERSION}/CONTRIBUTING.md)
                  - [Architecture DDD](https://github.com/Pierre-brtrd/api_lorem_ipsum/blob/v${VERSION}/NEXT_STEPS.md)

                  ## üêõ Probl√®mes Connus

                  Consultez les [issues ouvertes](https://github.com/Pierre-brtrd/api_lorem_ipsum/issues) pour les probl√®mes connus.

                  ---

                  **Version compl√®te du changelog** : [CHANGELOG.md](https://github.com/Pierre-brtrd/api_lorem_ipsum/blob/v${VERSION}/CHANGELOG.md)
                  EOF

                  echo "detailed-notes<<EOF" >> $GITHUB_OUTPUT
                  cat detailed_notes.md >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: üè∑Ô∏è Create Git Tag
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git tag -a "v${{ needs.check-version.outputs.version }}" -m "Release v${{ needs.check-version.outputs.version }}"
                  git push origin "v${{ needs.check-version.outputs.version }}"

            - name: üöÄ Create GitHub Release
              id: create-release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ needs.check-version.outputs.version }}
                  release_name: üöÄ API Lorem Ipsum v${{ needs.check-version.outputs.version }}
                  body: ${{ steps.release-notes.outputs.detailed-notes }}
                  draft: false
                  prerelease: ${{ contains(needs.check-version.outputs.version, 'alpha') || contains(needs.check-version.outputs.version, 'beta') || contains(needs.check-version.outputs.version, 'rc') }}

            - name: üìé Upload Release Assets
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create-release.outputs.upload_url }}
                  asset_path: ./api_lorem_ipsum-${{ needs.check-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz
                  asset_name: api_lorem_ipsum-${{ needs.check-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz
                  asset_content_type: application/gzip

            - name: üìé Upload Checksum
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create-release.outputs.upload_url }}
                  asset_path: ./api_lorem_ipsum-${{ needs.check-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz.sha256
                  asset_name: api_lorem_ipsum-${{ needs.check-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz.sha256
                  asset_content_type: text/plain

    notify:
        name: üì¢ Notify Release
        runs-on: ubuntu-latest
        needs: [check-version, release]
        if: needs.check-version.outputs.version-changed == 'true'

        steps:
            - name: üì¢ Create Release Announcement Issue
              uses: actions/github-script@v7
              with:
                  script: |
                      const version = '${{ needs.check-version.outputs.version }}';
                      const releaseNotes = `${{ needs.check-version.outputs.release-notes }}`;

                      const body = `# üéâ Nouvelle Release : v${version}

                      Une nouvelle version de l'API Lorem Ipsum vient d'√™tre publi√©e !

                      ## üìã Changements

                      ${releaseNotes}

                      ## üîó Liens

                      - **Release GitHub** : https://github.com/Pierre-brtrd/api_lorem_ipsum/releases/tag/v${version}
                      - **T√©l√©chargement** : [Archive binaire](https://github.com/Pierre-brtrd/api_lorem_ipsum/releases/download/v${version}/api_lorem_ipsum-${version}-x86_64-unknown-linux-gnu.tar.gz)
                      - **Documentation** : [README](https://github.com/Pierre-brtrd/api_lorem_ipsum/blob/v${version}/README.md)

                      ## üì¶ Installation

                      \`\`\`bash
                      # Depuis les sources
                      git clone https://github.com/Pierre-brtrd/api_lorem_ipsum.git
                      cd api_lorem_ipsum
                      git checkout v${version}
                      cargo build --release
                      \`\`\`

                      ## üöÄ Mise √† jour

                      Si vous utilisez d√©j√† l'API, pensez √† mettre √† jour vers cette nouvelle version !

                      ---

                      _Cette issue a √©t√© cr√©√©e automatiquement par le workflow de release._`;

                      github.rest.issues.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: `üöÄ Release v${version} disponible`,
                        body: body,
                        labels: ['release', 'announcement']
                      });
